buildscript {
    repositories {
        jcenter()
        maven {
            name 'prok'
            url 'https://github.com/juanmuscaria/maven/raw/master/ThermosLibs'
        }
        maven {
            name 'forge'
            url 'http://files.minecraftforge.net/maven/'
        }
        maven {
            name 'sonatype'
            url 'http://oss.sonatype.org/content/repositories/snapshots/'
        }
        maven {
            name 'spigot'
            url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
        }
       	maven {
	    name 'Commons-lang3'
		url 'https://mvnrepository.com/artifact/'
	    }
        flatDir {
            dirs 'libs'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath files('CrucibleGradle-1.0.jar')
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.8'
}

apply plugin: 'maven'
apply plugin: 'crucible'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'base'

repositories {
    jcenter()
    maven {
        name 'sonatype'
        url 'http://oss.sonatype.org/content/repositories/snapshots/'
    }
    maven {
        name 'prok'
        url 'https://github.com/juanmuscaria/maven/raw/master/ThermosLibs'
    }
    maven {
        name 'forge'
        url 'http://files.minecraftforge.net/maven/'
    }
    maven {
        name 'minecraft'
        url 'https://libraries.minecraft.net/'
    }
    maven {
        name 'spigot'
        url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }

    flatDir {
        dirs 'libs'
    }
}

minecraft {
    version = '1.7.10'
    mcpVersion = '9.08'
    mainClass = 'cpw.mods.fml.relauncher.ServerLaunchWrapper'
    tweakClass = 'cpw.mods.fml.common.launcher.FMLTweaker'
    installerVersion = "1.4"
    srgExtra "PK: org/bukkit/craftbukkit org/bukkit/craftbukkit/v1_7_R4"
}

group = 'cruciblemc'

ext.buildInfoCached = null;

ext.gitInfoCached = null;

def gitInfo(String key) {
    if (!gitInfoCached) {
        if (file('.git').exists()) {
            gitInfoCached = [
                    hash    : ['git', 'log', "--format=%h", '-n', '1'].execute().text.trim(),
                    fullHash: ['git', 'log', "--format=%H", '-n', '1'].execute().text.trim(),
                    branch  : System.getenv("CI_BUILD_REF_NAME") ?: ['git', 'symbolic-ref', '--short', 'HEAD'].execute().text.trim(),
                    message : ['git', 'log', "--format=%B", '-n', '1'].execute().text.trim()
            ]
        } else {
            gitInfoCached = [
                    hash    : 'NOT_A_GIT',
                    fullHash: 'NOT_A_GIT',
                    branch  : 'NOT_A_GIT',
                    message : 'NOT_A_GIT'
            ]
        }
    }
    return key ? gitInfoCached[key] : gitInfoCached;
}

ext.mcVersion = "1.7.10"
ext.forgeVersion = "1614"
ext.revision = "1.0.7"
ext.crucibleVersion = "4.1"
version = "${mcVersion}-${crucibleVersion}-${gitInfo('branch')}-${gitInfo('hash')}"
System.setProperty("file.encoding", "UTF-8")

launch4j {
    jreMinVersion = '1.8.0'
}

configurations {
    compile.extendsFrom exported
    libraries
    bootstrap
}

dependencies {
    bootstrap 'pw.prok:KBootstrap:0.2.+'
    libraries 'pw.prok:KBootstrap:0.3.2@jar'
    libraries 'pw.prok:Damask:0.1.2@jar'
    libraries 'commons-cli:commons-cli:1.3@jar'
    libraries 'org.slf4j:slf4j-simple:1.6.2@jar'
    libraries 'org.eclipse.jetty:jetty-servlet:9.0.3.v20130506@jar'
    libraries 'commons-io:commons-io:2.4@jar'
    libraries 'net.sf.opencsv:opencsv:2.0@jar'
    libraries 'com.beust:jcommander:1.30@jar'
    libraries 'net.minecraft:launchwrapper:1.12@jar'
    libraries 'org.ow2.asm:asm-all:5.0.3'
    libraries 'com.typesafe.akka:akka-actor_2.11:2.3.3'
    libraries 'com.typesafe:config:1.2.1'
    libraries 'org.scala-lang:scala-actors-migration_2.11:1.1.0'
    libraries 'org.scala-lang:scala-compiler:2.11.7'
    libraries 'org.scala-lang.plugins:scala-continuations-library_2.11:1.0.2'
    libraries 'org.scala-lang.plugins:scala-continuations-plugin_2.11.2:1.0.2'
    libraries 'org.scala-lang:scala-library:2.11.7'
    libraries 'org.scala-lang:scala-parser-combinators:2.11.0-M4'
    libraries 'org.scala-lang:scala-reflect:2.11.7'
    libraries 'org.scala-lang:scala-swing:2.11.0-M7'
    libraries 'org.scala-lang:scala-xml:2.11.0-M4'
    libraries 'net.sf.jopt-simple:jopt-simple:5.0.1'
    libraries 'lzma:lzma:0.0.1'
    libraries 'org.yaml:snakeyaml:1.9'
    libraries 'commons-lang:commons-lang:2.6'
    libraries group: 'org.apache.commons', name: 'commons-lang3', version: '3.3.2'
    libraries 'org.avaje:ebean:2.7.3'
    libraries 'jline:jline:2.6'
    libraries 'net.md-5:SpecialSource:1.7.4'
    libraries 'net.sourceforge.argo:argo:2.25'
    libraries 'com.googlecode.json-simple:json-simple:1.1'
    libraries 'org.xerial:sqlite-jdbc:3.7.2'
    libraries 'mysql:mysql-connector-java:5.1.14'
    libraries 'javax.persistence:persistence-api:1.0.2'
    libraries 'net.minecraft:server:1.7.10'
    libraries 'pw.prok:KImagine:0.2.0@jar'
    libraries 'org.apache.httpcomponents:httpclient:4.4.1'
    libraries 'net.openhft:affinity:3.0.1'
    libraries 'org.fusesource.jansi:jansi:1.11'
    libraries 'com.koloboke:koloboke-impl-jdk8:1.0.0'
    libraries 'java3d:vecmath:1.3.1'
    libraries 'it.unimi.dsi:fastutil:8.2.2'
    libraries fileTree(dir: "libs", include: "*.jar")
}

packageUniversal {
    from { configurations.exported.collect { it.isDirectory() ? it : zipTree(it) } }
}

def String repeat(String string, int times) {
    StringBuilder builder = new StringBuilder(string.length() * times)
    times.times { builder.append(string) }
    builder as String
}

def generateClasspath(boolean legacy = false) {
    def classpath = ''
    configurations.libraries.resolvedConfiguration.resolvedArtifacts.collect { it.moduleVersion.id }.each {
        def jar = "${it.group.replace('.', '/')}/${it.name}/${it.version}/${it.name}-${it.version}.jar"
        classpath += " ${legacy ? 'libraries/' : repeat('../', (group as String).split('\\.').length + 2)}${jar}"
    }
    return classpath.trim()
}

def generateManifest(boolean legacy = false) {
    [
            'Thermos-Git-Branch'    : gitInfo('branch'),
            'Thermos-Git-Hash'      : gitInfo('fullHash'),
            'Thermos-Group'         : project.group,
            'Thermos-Channel'       : project.name,
            'Thermos-Version'       : project.version,
            'Thermos-Legacy'        : legacy,
            'Implementation-Vendor' : 'CyberdyneCC',
            'Implementation-Title'  : project.name,
            'Implementation-Version': project.version,
            'Specification-Vendor'  : 'Bukkit Team',
            'Specification-Title'   : 'Bukkit',
            'Specification-Version' : '1.7.10-R0.1-SNAPSHOT',
            'Forge-Version'         : '10.13.4.1614',
            'TweakClass'            : 'cpw.mods.fml.common.launcher.FMLTweaker',
            'Main-Class'            : 'cpw.mods.fml.relauncher.ServerLaunchWrapper',
            'Class-Path'            : generateClasspath(legacy)
    ]
}

tasks.packageUniversal {
    classifier = 'server'
    setManifest {}
    manifest.attributes(generateManifest(true))
}

task copyLibraries(type: Copy) {
    into(buildDir)
    configurations.libraries.resolvedConfiguration.resolvedArtifacts.collect {
        def moduleVersion = it.moduleVersion
        from (it.file) {
            into ("libraries/${moduleVersion.id.group.replace('.', '/')}/${moduleVersion.id.name}/${moduleVersion.id.version}/")
        }
    }
}

task packageLibraries(type: Zip, dependsOn: copyLibraries) {
    setArchiveName("libraries.zip")
    setDestinationDir(file("$buildDir/distributions"))
    from("$buildDir/libraries")
}

task jar(type: Jar, dependsOn: [packageUniversal, packageLibraries]) {
    destinationDir file("${buildDir}/distributions")
    from zipTree(tasks.packageUniversal.archivePath)
    manifest.attributes(generateManifest())
}

tasks.packageInstaller.onlyIf { false }

tasks.generateProjectCauldron << {
    def file = new File('eclipse/cauldron/build.gradle')
    file.append('''
repositories {
    clear()
    maven {
        name 'prok'
        url 'https://github.com/juanmuscaria/maven/raw/master/ThermosLibs'
    }
    maven {
        name 'forge'
        url 'http://files.minecraftforge.net/maven/'
    }
    maven {
        name 'minecraft'
        url 'https://libraries.minecraft.net/'
    }
    mavenCentral()
    mavenLocal()
}
sourceCompatibility = 1.8
targetCompatibility = 1.8
dependencies {
''')
    configurations.libraries.resolvedConfiguration.resolvedArtifacts.collect { it.moduleVersion.id }.each { module ->
        if (['net.minecraft:server:', 'org.ow2.asm:asm-all'].findAll { (module as String).startsWith it }.size() > 0) {
            return
        }
        file.append("    compile '${module}'\n")
    }
    file.append('}')
}

task resolveAllDependencies {
    doLast {
        configurations.each { it.resolve() }
    }
}

task copyLibs( type: Copy ) {
    into "$buildDir/libs/lib"
    from configurations.libraries
}

subprojects {
    apply plugin: 'java'
    repositories {
        mavenCentral()
    }
}
