buildscript {
    repositories {
        mavenCentral()
        //mavenLocal() // for testing plugin pre release
        maven {
            name = "juanmuscaria"
            url = "https://github.com/juanmuscaria/maven/raw/master"
        }
        maven {
            name 'forge'
            url 'https://maven.minecraftforge.net/'
        }
    }
    dependencies {
        classpath 'com.anatawa12.forge:ForgeGradle:1.2-1.1.0'
        classpath 'io.github.cruciblemc:CrucibleGradle:1.0-SNAPSHOT'
    }
}

// Base lifecycle tasks are provided by this plugin
apply plugin: 'base'

// Crucible tasks and subproject management is provided by this plugin
apply plugin: 'crucible'

repositories {
    maven {
        name = "juanmuscaria"
        url = "https://github.com/juanmuscaria/maven/raw/master"
    }
    maven {
        name 'thermos'
        url 'https://github.com/juanmuscaria/maven/raw/master/ThermosLibs'
    }
    maven {
        name 'forge'
        url 'https://maven.minecraftforge.net/'
    }
    maven {
        name 'minecraft'
        url 'https://libraries.minecraft.net/'
    }
}

minecraft {
    version = '1.7.10'
    mcpVersion = '9.08'
    mainClass = 'cpw.mods.fml.relauncher.ServerLaunchWrapper'
    tweakClass = 'cpw.mods.fml.common.launcher.FMLTweaker'
    installerVersion = "1.4"
    srgExtra "PK: org/bukkit/craftbukkit org/bukkit/craftbukkit/v1_7_R4" // TODO: Perhaps rename the packages itself

    // Repos used on the generated subprojects
    repos = [
            'https://github.com/juanmuscaria/maven/raw/master/ThermosLibs',
            'https://github.com/juanmuscaria/maven/raw/master',
            'https://maven.minecraftforge.net/',
            'https://oss.sonatype.org/content/repositories/snapshots/',
            'https://libraries.minecraft.net/'
    ]
}

group = 'io.github.cruciblemc'

ext.buildInfoCached = null
ext.gitInfoCached = null
ext.mcVersion = "1.7.10"
ext.forgeVersion = "1614"
ext.revision = "1.0.7"
var crucibleVersion = "5.4" // TODO: Not hardcode the version.
if (gitInfo('branch') != "master") {
    version = "${mcVersion}-${gitInfo('branch')}-${gitInfo('hash')}"
} else {
    version = "${mcVersion}-${crucibleVersion}"
}

configurations {
    libraries
}

dependencies {
    libraries 'pw.prok:Damask:0.1.2@jar'
    libraries 'commons-cli:commons-cli:1.3@jar'
    libraries 'org.slf4j:slf4j-simple:1.6.2@jar'
    libraries 'org.eclipse.jetty:jetty-servlet:9.0.3.v20130506@jar'
    libraries 'commons-io:commons-io:2.4@jar'
    libraries 'net.sf.opencsv:opencsv:2.0@jar'
    libraries 'com.beust:jcommander:1.30@jar'
    libraries 'io.github.cruciblemc:launchwrapper:1.13@jar'
    libraries 'org.ow2.asm:asm-all:5.0.3'
    libraries 'com.typesafe.akka:akka-actor_2.11:2.3.3'
    libraries 'com.typesafe:config:1.2.1'
    libraries 'org.scala-lang:scala-actors-migration_2.11:1.1.0'
    libraries 'org.scala-lang:scala-compiler:2.11.7'
    libraries 'org.scala-lang.plugins:scala-continuations-library_2.11:1.0.2'
    libraries 'org.scala-lang.plugins:scala-continuations-plugin_2.11.2:1.0.2'
    libraries 'org.scala-lang:scala-library:2.11.7'
    libraries 'org.scala-lang:scala-parser-combinators:2.11.0-M4'
    libraries 'org.scala-lang:scala-reflect:2.11.7'
    libraries 'org.scala-lang:scala-swing:2.11.0-M7'
    libraries 'org.scala-lang:scala-xml:2.11.0-M4'
    libraries 'net.sf.jopt-simple:jopt-simple:5.0.1'
    libraries 'lzma:lzma:0.0.1'
    libraries 'org.yaml:snakeyaml:1.9'
    libraries 'commons-lang:commons-lang:2.6'
    libraries 'org.avaje:ebean:2.7.3'
    libraries 'jline:jline:2.6'
    libraries 'net.md-5:SpecialSource:1.7.4'
    libraries 'net.sourceforge.argo:argo:2.25'
    libraries 'com.googlecode.json-simple:json-simple:1.1'
    libraries 'org.xerial:sqlite-jdbc:3.7.2'
    libraries 'mysql:mysql-connector-java:5.1.14'
    libraries 'javax.persistence:persistence-api:1.0.2'
    libraries 'net.minecraft:server:1.7.10'
    libraries 'pw.prok:KImagine:0.2.0@jar'
    libraries 'org.apache.httpcomponents:httpclient:4.4.1'
    libraries 'net.openhft:affinity:3.0.1'
    libraries 'org.fusesource.jansi:jansi:1.11'
    libraries 'com.koloboke:koloboke-impl-jdk8:1.0.0'
    libraries 'java3d:vecmath:1.3.1'
    libraries 'it.unimi.dsi:fastutil:8.2.2'
}

packageServer {
    manifest {
        attributes([
                'Thermos-Git-Branch'    : gitInfo('branch'),
                'Thermos-Git-Hash'      : gitInfo('fullHash'),
                'Thermos-Group'         : project.group,
                'Thermos-Channel'       : project.name,
                'Thermos-Version'       : project.version,
                'Thermos-Legacy'        : true,
                'Implementation-Vendor' : 'CrucibleMC Team',
                'Implementation-Title'  : project.name,
                'Implementation-Version': project.version,
                'Specification-Vendor'  : 'Bukkit Team',
                'Specification-Title'   : 'Bukkit',
                'Specification-Version' : '1.7.10-R0.1-SNAPSHOT',
                'Forge-Version'         : '10.13.4.1614',
                'TweakClass'            : 'cpw.mods.fml.common.launcher.FMLTweaker',
                'Main-Class'            : 'cpw.mods.fml.relauncher.ServerLaunchWrapper',
                'Class-Path'            : generateClasspath(),
                'Crucible-Libs'         : generateMavenLibs()
        ])
    }
}

def gitInfo(String key) {
    if (!gitInfoCached) {
        if (file('.git').exists()) {
            gitInfoCached = [
                    hash    : ['git', 'log', "--format=%h", '-n', '1'].execute().text.trim(),
                    fullHash: ['git', 'log', "--format=%H", '-n', '1'].execute().text.trim(),
                    branch  : ['git', 'symbolic-ref', '--short', 'HEAD'].execute().text.trim(),
                    message : ['git', 'log', "--format=%B", '-n', '1'].execute().text.trim()
            ]
        } else {
            gitInfoCached = [
                    hash    : 'NOT_A_GIT',
                    fullHash: 'NOT_A_GIT',
                    branch  : 'NOT_A_GIT',
                    message : 'NOT_A_GIT'
            ]
        }
    }
    return key ? gitInfoCached[key] : gitInfoCached
}

def generateClasspath() {
    def classpath = ''
    configurations.libraries.resolvedConfiguration.resolvedArtifacts.collect { it.moduleVersion.id }.each {
        def jar = "${it.group.replace('.', '/')}/${it.name}/${it.version}/${it.name}-${it.version}.jar"
        classpath += " ${'libraries/'}${jar}"
    }
    return classpath.trim()
}

def generateMavenLibs() {
    def libs = ''
    configurations.libraries.resolvedConfiguration.resolvedArtifacts.collect { it.moduleVersion.id }.each {
        libs += " ${it.group}:${it.name}:${it.version}"
    }
    return libs.trim()
}